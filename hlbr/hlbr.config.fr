#################################
#################################
##                             ##
## HLBR - Hogwash Light BR     ##
##                             ## 
## Fichier de configuration    ##
##                             ##
#################################
#################################





############################################################################
# Paramétrage général
#
# Vous ne devriez à avoir à modifier cette section que si vous avez besoin 
# de centraliser les logs. Vous n'aurez donc en général pas besoin de faire 
# des modifications ici.
#
# Name=nom de la sonde
#
#    Identifie la sonde (ordinateur sur lequel est installé l'IPS). Utile si 
# 	 vous souhaitez centraliser les logs.
#   
# ID=ID de la sonde
#
#    De même que le nom, l'ID est utile pour identifier la sonde dans les
#    logs.
#
# Threads=1 / 0
#
#    Si la valeur de threads est à 0, HLBR ne lancera qu'un seul thread afin
#    de contrôler le démon et les interfaces réseau. Si elle est à 1, (n+1)
#    threads  seront lancés, n étant le nombre de cartes réseau utilisées.
#
# AlertHeader=
#
#    Définit le format utilisé dans les fichiers de logs. Les formats possibles
#    sont:
#    %sip (ip source), %dip (ip destination), %sp (port source), 
#    %dp (port destination), %d (jour), %m (mois), %y (année), %h (heure),
#    %min (minute), %s (seconde), %usec (microseconde), %pn (numéro séquentiel
#    de paquets), %ac (numéro d'alerte - recommence à 1 à chaque démarrage de
#    HLBR
############################################################################




<system>
Name=HLBR_1
ID=1
Threads=1
AlertHeader=%ac %m/%d/%y %h:%min:%s %sip:%sp->%dip:%dp
</system>





############################################################################
# Gestion des interfaces
#
# Cette section définit quelle(s) interface(s) réseau sera(ont) utilisée(s).
# Il n'y a pas besoin de définir des interfaces qui ne seront pas utilisées
# dans le pont.
#
# interface eth0 / ppp0 / wlan0 / autre
#
#    Définit l'interface réseau.
#
# Type=linux_raw / obsd_bpf / osx_bpf / solaris_dlpi / tcpdump
#
#    Dépend du système d'exploitation utilisé. Ceux qui ont été testés avec 
#    succès sont Linux, OpenBSD, MacOS X et Solaris. Vous pouvez aussi utiliser
#    l'option tcpdump pour générer du trafic à partir d'un fichier pcap (créé par 
#    tcpdump ou Ethereal, ou un fichier de dump de HLBR).
#
# Proto=Ethernet
#
#    Définit quelle type de couche 2 (modèle OSI) utiliser. La seule couche
#    supportée pour l'instant est Ethernet.
#############################################################################




<interface eth0>
Type=linux_raw
Proto=Ethernet
</interface>

<interface eth1>
Type=linux_raw
Proto=Ethernet
</interface>




#############################################################################
# Gestion des listes IP
#
# Les listes IP sont utilisées pour associer des noms à des groupes d'adresses,
# de noms d'hôtes ou de réseaux, noms qui peuvent ensuite être utilisés dans
# des règles pour spéficier leurs destinations. Bien que ces listes ont pour
# but de faciliter la création de règles, les adresses IP peuvent aussi être
# utilisées.
#
# Les Listes IP peuvent contenir des noms d'hôtes, des adresses de réseaux
# ou encore des noms de Listes IP déjà définies. Une Liste IP peut avoir
# n'importe quel nom. Dans l'exemple suivant, xxx et yyy sont des nombres
# (à titre d'exemple, ils doivent être changés en adresses IP réelles)
#
# Souvenez-vous que vous pouvez créer vos propres Listes IP et supprimer
# celles ci-dessous.
#############################################################################




<IPList www>
200.xxx.yyy.195
200.xxx.yyy.196
</list>

<IPList dns>
200.xxx.yyy.195
200.xxx.yyy.197
</list>

<IPList email>
200.xxx.yyy.198
</list>

<IPList firewall>
200.xxx.yyy.210
</list>

<IPList network>
200.xxx.yyy.192/26
</list>

<IPList others>
200.xxx.yyy.194
200.xxx.yyy.199
</list>

<IPList servers>
www
dns
email
firewall
others
200.xxx.yyy.209
</list>




############################################################################
# Gestion des actions
#
# Cette section définit les actions à prendre quand un paquet avec du contenu 
# suspect est détecté par une règle.
# 
# Les possibilités sont les suivantes:
#
# response=alert console
#
#    Remonte la ligne de log à l'écran pendant que HBLR tourne.
#
# response=alert file(name_of_log_file)
#
#    Enregistre la ligne de log dans un fichier spécifique.
#
# response=alert syslog(facility, priority, options)
#
#    Définit un serveur de logs distant (pas encore testé)
#
# response=dump packet(dump_file)
#
#    Enregistre le paquet suspect dans un fichier dump, au format tcpdump
#    (libpcap), ce qui permettra une analyse ultérieure de ce dernier
#	   (pas encore testé).
#
# response=email(host, from, to, subject)
#
#    Envoie chaque évènement de log par email (pas encore testé).
#
# response=drop
#
#    Ne tient pas compte du paquet suspect (ne termine pas la connection).
#
# Note: Le chemin vers les fichiers de logs peuvent être définis dans les
# options ci-dessus ou via l'option -l (lancez hlbr sans aucune option pour
# plus d'info).
#############################################################################




<action action1>
response=alert file(/var/log/hlbr/hlbr.log)
response=dump packet(/var/log/hlbr/hlbr.dump)
response=drop
</action>

<action action2>
response=alert file(/var/log/hlbr/hlbr-2.log)
response=dump packet(/var/log/hlbr/hlbr-2.dump)
</action>

<action virus>
response=alert file(/var/log/hlbr/virus.log)
response=dump packet(/var/log/hlbr/virus.dump)
response=drop
</action>



############################################################################
# Gestion du routage
#
# Cette section définit la manière dont sera créé le pont en utilisant les 
# interfaces précédemment définies.
#
# Les options possibles sont:
#
# SBridge(interface_1, interface_2)
#
#    SBridge peut mettre 2 (et seulement 2) interfaces en mode pont. C'est une
#    méthode rapide et facile, qui crée une simple connection entre deux 
#    interfaces that passes forth all packets received.
#
# MacFilter(interface_1, interface_2, interface_3....)
#
#    MacFilter peut être utilisé avec au moins deux adaptateurs réseau. Il 
#    utilise l'adresse MAC d'un paquet pour découvrir sur quelle interface il
#    sera  routé, comme le ferait un switch. Même si MacBridge est moins
#    rapide que SBridge, il peut quand même être utilisé dans le (rare) cas
#    où vous avez des soucis avec SBridge. Quand HLBR est lancé avec cette option,
#    les tout premiers paquets peuvent mettre un peu de temps à passer car HLBR
#		 sera en train de construire la table MAC (comme le ferait un vrai switch).
#
# Broadcast()
#    
#    Peut être utilisé avec les options ci-dessus, au cas où Linux serait en
#    train de dupliquer les paquets ARP, ce qui ne devrait jamais arriver
#    (pas encore testé).
#
# SIP(interface or IP List)
#
#    Utilisé avec MacFilter pour déterminer par quelle interface passera un
#    paquet selon l'adresse source. Option utile quand un paquet doit passer
#    par un réseau intermédiaire avant d'en atteindre un qui n'est pas défini
#    dans les routeurs. (pas encore testé)
# DIP(interface or IP List)
#
#    De même que SIP, mais pour une adresse de destination (pas encore testé)
#
# NB: Même si ce n'est pas son objectif premier, HLBR peut être utilisé comme
#     un IDS. Pour ce faire, il vous suffit de mettre en commentaires toute
#     cette sectionrelative au routage
############################################################################




<routing>
SBridge(eth0, eth1)
</routing>
