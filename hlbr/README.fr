HOGWASH LIGHT BR

INSTALLATION
------------

Voici la liste des étapes à suivre pour installer HLBR:

1. Après avoir décompressé le tarball, lancez la commande suivante: 
   "# ./configure".

2. Lancez la commande "# make". Pour cela, vous aurez besoin d'avoir installé 
	 au préalable des compilateurs pour C (gcc) et C++ (g++).

3. Lancez la commande "# make installen" pour installer HLBR avec la version 
   anglaise du fichier de configuration (i.e. les commentaires seront en anglais).
   Pour avoir ce fichier en version portugaise (portugais du Brésil), lancez la
   commande "#make install".

4. Editez le fichier /etc/hlbr.config afin de le paramétrer selon vos besoins.

5. Compilez un nouveau noyau en supprimant toute la pile TCP/IP ainsi que tout ce qui
	 y est relatif OU configurez les cartes réseau avec des adresses de la plage
	 127.0.0.0/24 (n'utilisez pas l'adresse 127.0.0.1 qui est déjà utilisée comme 
	 interface loopback). Dans le dernier cas, utilisez alors des adresses comme
	 127.0.0.2, 127.0.0.3, etc. Nous vous recommandons plus la deuxième option
	 que la recompilation de noyau, car non seulement cela sera plus facile pour 
	 vous, mais cela vous permettra également d'utiliser des programmes comme
	 Iptraf ou TCPdump car vous aurez gardé la couche support (couche 3). Les
	 données passeront par la couche 2 (liaison), mais seront visibles de la
	 couche 3 (réseau).

6. Pour tester, allez dans le répertoire /etc/hlbr pour y lancer la commande suivante:
    # hlbr -c hlbr.config -r empty.rules
    Ceci devrait démarrer le démon HLBR.

7. Arrêtez le service avec Ctrl-C.

8. Changez les fichiers de règles (*.rules) se trouvant dans /etc/hlbr/rules selon
   vos besoins. Ces fichiers sont listés dans /etc/hlbr/hlbr.rules.
   
9. La commande suivante lance HLBR:
    # hlbr -c hlbr.config -r hlbr.rules &
    ou alors
    # /etc/init.d/hlbr start

10. Les fichiers de logs sont disponibles par défaut dans /var/log/hlbr. Mais vous pouvez
		spécifier un autre chemin dans le fichier de configuration /etc/hlbr/hlbr.config, 
		ou alors vous lancez hlbr avec le commutateur "-l" (lancez "hlbr" pour avoir une
		liste des options disponibles)

11. Pour arrêter HLBR, lancez:
    # killall hlbr
    ou
    # /etc/init.d/hlbr stop
    
12. Pour désinstaller HLBR, lancez "# make uninstall". Attention: cette commande supprimera
		également tous les fichiers de configuration, de règles et de logs.

13. Pour 'nettoyer' le répertoire source (i.e. revenir à l'état d'avant l'installation de
		HLBR), lancez "# make clean".
		
14.	Pour de plus amples information et une documentation plus complète, veuillez vous
		référer au site web officiel du projet: http://hlbr.sourceforge.net
		(ou http://hlbr.sf.net).



MISE A JOUR
-----------
Si vous souhaitez passer de la version 0.1-rc1 à la 0.1-rc2, nous vous conseillons de
supprimer complètement la version 0.1-rc1 avant d'installer la rc2, car les changements
entre les deux versions sont majeurs. Ceci ne sera plus nécessaire pour les mises à jour
venant après la version 0.1.



FICHIERS DE REGLES
------------------
Les fichiers de règles peuvent contenir plusieurs règles et inclure d'autres
fichiers de règles via une directive <include>. Par exemple:

<include codered.rules>
<include nimda.rules>

Il est possible de forcer le chargement de n'importe quel fichier de règles
avec le commutateur -r, mais par défaut, HLBR utilise /etc/hlbr/hlbr.rules
comme fichier de règles principal.

Certains <include>s dans /etc/hlbr/hlbr.rules peuvent être mis en commentaire.
Cela signifie que les règles correspondantes doivent être analysées avant d'être
utilisées en production. Ces fichiers ont des règles qui peuvent, théoriquement,
paralyser votre réseau selon ce que vous utilisez sur votre réseau.



LES REGLES HLBR
---------------
Un exemple de règle:

<rule>
ip dst(www)
tcp dst(80)
tcp nocase(cmd.exe)
message=Remote shell try cmd.exe
action=action1
</rule>

Toutes les règles commencent par une balise <rule> et se terminent par une balise </rule>.
Le répertoire contrib contient les règles originales de la version 0.5 du projet Hogwash. 
Faites attention avec ces règles, car certaines sont génériques, vieillottes ou peuvent 
ne plus être utilisées dans HLBR ; mais elles peuvent cependant utile à des fins 
didactiques pour apprendre à créer des règles. Par conséquent, n'utilisez en production 
que les règles qui viennent avec HLBR, ou alors développez vos propres règles ! -ce n'est
pas aussi difficile que cela-.



EXEMPLES D'OPTIONS DE REGLES
----------------------------
interface name(eth0, eth1, eth5-eth6, ppp0)
	Filtrage sur une interface, plusieurs interfaces ou plages d'interfaces.

ethernet src(01:02:03:04:05:06)
	Filtrage sur l'adresse MAC source (pas encore testé)
    
ethernet dst(01:02:03:04:05:06)
	Filtrage sur l'adresse MAC destination (pas encore testé)
    
ethernet type(IP, ARP, 0804)
	Filtrage sur un ou plusieurs protocoles, ainsi que défini dans le champ 'type'
	des trames Ethernet. Le protocole peut être spécifié par son nom ou son numéro.
	Veuillez vous référer aux définitions de l'IANA [1]. (pas encore testé)

ip src(10.10.10.2, WebServers, 192.168.0.0/16, 172.12.34.24-172.12.34.55)
	Filtre sur l'adresse IP source. Vous pouvez spécifier des adresses IP, des noms 
	d'hôtes, des plages ou listes d'adresses IP.
	
ip dst(10.10.10.2, WebServers, 192.168.0.0/16, 172.12.34.24-172.12.34.55)
	Filtre sur les adresses IP destination

ip proto(TCP, UDP, ICMP, IGMP, PIM, OSPF, 13-15)
	Filtre sur le protocole spécifié par le paquet IP. Les systèmes Unix ont
	une liste de ces protocoles dans /etc/protocols. Cf. IANA[4].
    
ip ttl(1-5)
	Vérifie la valeur du champ TTL. (pas encore testé)
    
icmp code(6)
	Filtre sur le code ICMP. Cf. RFC 792 [2] et IANA [3]. (pas encore testé)

icmp type(4)
	Filtre sur le type ICMP. Cf. RFC 792 [2] et IANA [3]. (pas encore testé)

tcp src(80, 21-25)
	Filtre sur le(s) port(s) source(s) TCP. Il est possible de spécifier 
	plusieurs ports ou plages de ports. Les systèmes Unix ont une liste 
	de ces ports dans /etc/services.
    
tcp dst(80, 21-25)
	Filtre sur le(s) port(s) TCP de destination.
    
udp src(53)
	Filtre sur le(s) port(s) source(s) UDP.
    
udp dst(32000-32999, 53)
	Filtre sur le(s) port(s) destination UDP.
    
tcp content(/etc/passwd)
	Filtre sur le contenu d'un flux TCP (sensible à la casse et les espaces
	sont considérés comme des caractères). Les chaînes d'octets non-ASCII peuvent
	être définies en hexadécimal entre deux tubes ('|').
    
tcp nocase(default.ida? XXXXXXX)
	Identique au filtrage TCP, mais en ignorant la casse cette fois-ci

udp content(bind|90 90 90|)
	Identique au filtrage TCP, mais pour les paquets UDP.
    
udp nocase(|90 90 90 90 90 90 90 90|)
	Identique au filtrage sur le flux TCP, mais en ignorant la casse et 
	pour les paquets UDP.
    
tcp flags(Sfr)
	Teste les drapeaux TCP. Les lettres S, F, R, P, A, U, E, et C représentent
	respectivement les drapeaux SYN, FIN, RST, PSH, ACK, URG, EGE et CWR. Si la 
	lettre est en majuscule, le drapeau sera placé ; sinon le drapeau sera ignoré.
	Cf. RFCs 793 [5] et 3168 [6]. (pas encore testé)
  
tcp offset(10,Hello World)
	Teste la chaîne spécifiée ("Hello world") dans la charge utile de TCP, à
	partir du 10ème octet (pas encore testé).



GARANTIES
---------
Tous les tests ont été réalisés avec succès sous Debian GNU/Linux Sarge Stable R0a 
et R1. Nous recommandons DEBIAN !



REFERENCES
-----------
[1] http://www.iana.org/assignments/ethernet-numbers
[2] ftp://ftp.rfc-editor.org/in-notes/rfc792.txt
[3] http://www.iana.org/assignments/icmp-parameters
[4] http://www.iana.org/assignments/protocol-numbers
[5] ftp://ftp.rfc-editor.org/in-notes/rfc793.txt
[6] ftp://ftp.rfc-editor.org/in-notes/rfc3168.txt



AIDEZ-NOUS !
------------
Nous sommes à la recherche de volontaires pour aider l'équipe de développement
de HLBR. Vous pouvez nous aider en développant du code, en testant HLBR, en 
écrivant des règles ou encore en faisant des traductions. Si vous êtes 
intéressés, veuillez visiter pour plus d'informations la page suivante: 
http://hlbr.sourceforge.net.

Tout travail fait par des volontaires sera testé, revu et homologué par les
chefs de projet avant d'être publié pour être utilisé en production.
